#version 450

const int MAX_LISTS = 32;
const int MAX_ANIMATION_INSTRUCTIONS = 64;

const int INST_SETSCALE =       1;
const int INST_LERPSCALE =      2;
const int INST_SETROTATION =    3;
const int INST_LERPROTATION =   4;
const int INST_SETRECTANGLE =   5;

layout (local_size_x = 512) in;

struct Instruction
{
    vec4 Argument;
    int Type;
    float Time;
};

struct Animation
{
    int Length;
    Instruction Instruction[MAX_ANIMATION_INSTRUCTIONS];
};

struct Instance
{
    vec3 Position;
    vec3 Velocity;
    vec4 Rectangle;
    vec2 Scale;
    float Rotation;
    int ListIndex;
    float Time;
    float AnimationTime;
};

struct VertexInstance
{
    mat4 Transform;
    vec4 Rectangle;
};

layout (std140, binding = 0) buffer buffer_Instances
{
    Instance instances[];
};

layout (std140, binding = 1) buffer buffer_Out
{
    VertexInstance vertexInstances[];
};

layout (std140, binding = 2) uniform struct_Time
{
    float listTime[MAX_LISTS];
} time;

layout (std140, binding = 3) uniform struct_Animation
{
    Animation animation[MAX_LISTS];
} animation;

Instance doMovement(Instance instance, float deltaTime)
{
    instance.Position += instance.Velocity * deltaTime;
    return instance;
}

Instance doAnimation(Instance instance)
{
    Animation anim = animation.animation[instance.ListIndex];
    float animTime = mod(instance.AnimationTime, anim.Instruction[anim.Length - 1].Time);
    for (int i = 0; i < anim.Length; i++)
    {
        Instruction instruction = anim.Instruction[i];
        float applies = float(instruction.Time <= animTime);
        vec4 arg = instruction.Argument;
        float interpLength = instruction.Argument.x;
        vec3 interpArg = instruction.Argument.yzw;
        float interpRatio = clamp((animTime - instruction.Time) / interpLength, 0.0, 1.0);

        instance.Scale = mix(instance.Scale, arg.xy, applies * float(instruction.Type == INST_SETSCALE));
        instance.Scale = mix(instance.Scale, interpArg.xy, applies * float(instruction.Type == INST_LERPSCALE) * interpRatio);
        instance.Rotation = mix(instance.Rotation, arg.x, applies * float(instruction.Type == INST_SETROTATION));
        instance.Rotation = mix(instance.Rotation, interpArg.x, applies * float(instruction.Type == INST_LERPROTATION) * interpRatio);
        instance.Rectangle = mix(instance.Rectangle, arg, applies * float(instruction.Type == INST_SETRECTANGLE));
    }
    return instance;
}

mat4 mat_scale(vec3 scale)
{
    return mat4(
            scale.x,    0,          0,          0,
            0,          scale.y,    0,          0,
            0,          0,          scale.z,    0,
            0,          0,          0,          1
        );
}

mat4 mat_translate(vec3 trans)
{
    return mat4(
            1,          0,          0,          0,
            0,          1,          0,          0,
            0,          0,          1,          0,
            trans.x,    trans.y,    trans.z,    1
        );
}

mat4 mat_rotateZ(float angle)
{
    float cos = cos(angle);
    float sin = sin(angle);
    return mat4(
            cos,        sin,        0,          0,
            -sin,       cos,        0,          0,
            0,          0,          1,          0,
            0,          0,          0,          1
        );
}

mat4 buildMatrix(Instance instance)
{
    mat4 mat = mat_translate(instance.Position) * mat_scale(vec3(instance.Scale, 1.0)) * mat_rotateZ(instance.Rotation);
    return mat;
}

VertexInstance buildVertexInstance(Instance instance)
{
    VertexInstance vinst;
    vinst.Transform = buildMatrix(instance);
    vinst.Rectangle = instance.Rectangle;
    return vinst;
}

Instance animatedInstance(uint index)
{
    Instance instance = instances[index];
    float currentTime = time.listTime[instance.ListIndex];
    float previousTime = instance.Time;
    float deltaTime = currentTime - previousTime;

    instance = doMovement(instance, deltaTime);
    instance = doAnimation(instance);

    instance.Time = currentTime;
    instance.AnimationTime += deltaTime;
    return instance;
}

void main() 
{
    uint index = gl_GlobalInvocationID.x;
    Instance instance = animatedInstance(index);
    instances[index] = instance;
    vertexInstances[index] = buildVertexInstance(instance);
}
